# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Alliance {
  allianceId: Int!
  allianceName: String!
  ticker: String!
  dateFounded: Date
  factionId: Int
}

type Character {
  id: Int!
  characterId: Int!
  lastLogin: Date!
  active: Boolean!
  name: String!
  ownerHash: String!
  esiAccessToken: String!
  esiAccessTokenExpires: Date!
  esiRefreshToken: String!
  esiScopes: String!
  corporationId: Int!
  allianceId: Int!
}

enum Class {
  C1
  C2
  C3
  C4
  C5
  C6
  HIGH
  LOW
  NULL
  THERA
  SHATTERED
  SENTINEL
  BARBICAN
  VIDETTE
  CONFLUX
  REDOUBT
}

type Connection {
  id: String!
  mapId: Int!
  source: String!
  target: String!
  createdAt: Date!
  updatedAt: Date!
}

type Corporation {
  corporationId: Int!
  corporationName: String!
  ticker: String!
  dateFounded: Date
  memberCount: Int!
  isNPC: Boolean!
  allianceId: Int
  factionId: Int
  allianceName: String
  alliance: Alliance
}

input CorporationInput {
  corporationId: Int!
  corporationName: String!
  ticker: String!
  dateFounded: Date = null
  memberCount: Int!
  isNPC: Boolean = false
  allianceId: Int = null
  factionId: Int = null
}

"""Date custom scalar type"""
scalar Date

enum Effect {
  redGiant
  cataclysmic
  magnetar
  pulsar
  wolfRayet
  blackHole
}

type Mutation {
  addCorporation(corporationData: CorporationInput!): Corporation!
}

type Node {
  id: String!
  mapId: Int!
  system: System!
}

type Query {
  helloWorld: String!
  hello(name: String!): String!
  currentShip: Ship!
  ship(name: String!): Ship!
  online: Boolean!
  whoAmI: Character!
  location: System!
  systemId(id: Float!): System!
  systemName(name: String!): System!
  systemReg(name: String!): [String!]!
  systems(effect: Effect = null, statics: [Class!] = [], class: Class = null): [System!]!
  route(dest: Float!, source: Float!): [System!]!
  wormhole(name: String!): Wormhole!
  wormholeConn(source: Class!): [Wormhole!]!
  corporation(name: String!): Corporation!
  connections(map: Float!): [Connection!]!
  nodes(map: Float!): [Node!]!
}

type Ship {
  id: Int!
  name: String!
  mass: Float!
  alias: String
}

type Subscription {
  corpChanged: Corporation!
}

type System {
  id: Int!
  constellationId: Int
  regionId: Int
  systemName: String!
  security: String
  trueSec: Float!
  securityStatus: Float!
  securityClass: String
  class: Class!
  effect: Effect
  statics: [Wormhole!]!
}

type Wormhole {
  id: Int!
  name: String!
  sourceClasses: [Class!]!
  targetClass: Class!
  lifetime: Float!
  maxMass: Float!
  massRegen: Float!
  maxOnePass: Float!
  scanStrength: Float
}
